
// This module handles the conversion of thesis data to LaTeX, using a preselected template.
// Sections expected: Portada (from meta), Introducción, Capítulos (can be multiple), Conclusiones.
// Índice (table of contents) and Bibliografía (bibliography) are auto-generated by LaTeX commands in the template.
// Example section structure:
// [
//   { id: "intro", title: "Introducción", level: 1, content: "..." },
//   { id: "chapters", title: "Capítulos", level: 1, children: [
//     { id: "ch1", title: "Capítulo 1", level: 2, content: "..." },
//     // ...more chapters
//   ]},
//   { id: "conclusions", title: "Conclusiones", level: 1, content: "..." }
// ]

// Mapea niveles -> comandos LaTeX
const LEVEL_CMD = {
  1: "\\section",
  2: "\\subsection",
  3: "\\subsubsection",
  4: "\\paragraph"
};

// Escapa caracteres problemáticos de LaTeX
export function escapeLatex(s = "") {
  return String(s)
    .replace(/\\/g, "\\textbackslash{}")
    .replace(/([#%&_$])/g, "\\$1")
    .replace(/{/g, "\\{")
    .replace(/}/g, "\\}")
    .replace(/\^/g, "\\textasciicircum{}")
    .replace(/~/g, "\\textasciitilde{}");
}

// Markdown muy ligero -> LaTeX
export function mdToLatex(md = "") {
  let s = String(md);

  // citas: [@clave] -> \autocite{clave}
  s = s.replace(/\[@([\w:-]+)\]/g, "\\autocite{$1}");

  // negritas: **x** -> \textbf{x}
  s = s.replace(/\*\*([^*]+)\*\*/g, "\\textbf{$1}");

  // cursivas: *x* -> \textit{x}
  s = s.replace(/(?<!\*)\*([^*]+)\*(?!\*)/g, "\\textit{$1}");

  // código inline: `x` -> \texttt{x}
  s = s.replace(/`([^`]+)`/g, "\\texttt{$1}");

  // enlaces: [texto](url) -> \href{url}{texto}
  s = s.replace(/\[([^\]]+)\]\(([^)]+)\)/g, "\\href{$2}{$1}");

  // listas con "- " al inicio de línea -> itemize
  s = s.replace(/^\s*-\s+(.*)$/gm, "\\item $1");
  s = s.replace(/((?:\\item .*(?:\n|$))+)/g, (m) => `\\begin{itemize}\n${m}\\end{itemize}`);

  return s;
}

// Renderiza una sección y sus hijas
export function renderSection(sec) {
  const cmd = LEVEL_CMD[sec?.level] || "\\paragraph";
  const title = escapeLatex(sec?.title || "Untitled");
  const body = mdToLatex(sec?.content || "");
  const children = (sec?.children || []).map(renderSection).join("\n\n");
  return `${cmd}{${title}}\n\n${body}\n\n${children}`.trim();
}

// Ensambla todas las secciones (separadas por \clearpage)
export function renderContent(sections = []) {
  return sections.map(renderSection).join("\n\n\\clearpage\n\n");
}

// Plantilla por defecto (puedes sobreescribirla desde la UI)
export const DEFAULT_TEMPLATE = String.raw`% Auto-generated by Thesis Builder
\documentclass[12pt]{report}
\usepackage[margin=1in]{geometry}
\usepackage{setspace}\onehalfspacing
\usepackage[hidelinks]{hyperref}
\usepackage{graphicx}
\usepackage{amsmath, amssymb}
\usepackage{csquotes}
\usepackage[backend=biber,style=apa]{biblatex}
\addbibresource{references.bib}

% Portada (cover) se genera de meta: title, author, date
\title{\MakeUppercase{\VARtitle}}
\author{\VARauthor}
\date{\VARdate}

\begin{document}
\maketitle
% Índice (table of contents) se autogenera
\tableofcontents
\cleardoublepage

% === CONTENT START ===
\VARcontent
% === CONTENT END ===

\cleardoublepage
% Bibliografía (bibliography) se autogenera
\printbibliography
\end{document}
`;

// buildTex: inserta meta + contenido en la plantilla LaTeX
export function buildTex(template, thesis) {
  const tpl = template && template.trim().length ? template : DEFAULT_TEMPLATE;

  const meta = thesis?.meta || {};
  const sections = thesis?.sections || [];

  const filled = tpl
    .replace("\\VARtitle", escapeLatex(meta.title || "Thesis Title"))
    .replace("\\VARauthor", escapeLatex(meta.author || "Author"))
    .replace("\\VARdate", escapeLatex(meta.date || "\\today"))
    .replace(
      /% === CONTENT START ===[\s\S]*% === CONTENT END ===/,
      `% === CONTENT START ===\n${renderContent(sections)}\n% === CONTENT END ===`
    );

  return filled;
}
